// Control Flow Graph
digraph {
	1 [label="1: enter: quad_solver(a, b, c)" peripheries=2 shape=oval]
	2 [label="1: exit: quad_solver(a, b, c)" peripheries=2 shape=oval]
	15 -> 2 [color=green]
	16 -> 2 [color=red]
	3 [label="2: discriminant = b ^ 2 - 4 * a * c" peripheries=1 shape=rectangle]
	1 -> 3 [color=red]
	4 [label="3: r1, r2 = 0, 0" peripheries=1 shape=rectangle]
	3 -> 4 [color=red]
	5 [label="4: i1, i2 = 0, 0" peripheries=1 shape=rectangle]
	4 -> 5 [color=red]
	6 [label="5: if: discriminant >= 0" peripheries=1 shape=diamond]
	5 -> 6 [color=red]
	7 [label="6: droot = math.sqrt(discriminant)" peripheries=1 shape=rectangle]
	6 -> 7 [color=green]
	8 [label="7: r1 = (-b + droot) / (2 * a)" peripheries=1 shape=rectangle]
	7 -> 8 [color=red]
	9 [label="8: r2 = (-b - droot) / (2 * a)" peripheries=1 shape=rectangle]
	8 -> 9 [color=red]
	10 [label="10: droot = math.sqrt(-1 * discriminant)" peripheries=1 shape=rectangle]
	6 -> 10 [color=red]
	11 [label="11: droot_ = droot / (2 * a)" peripheries=1 shape=rectangle]
	10 -> 11 [color=red]
	12 [label="12: r1, i1 = -b / (2 * a), droot_" peripheries=1 shape=rectangle]
	11 -> 12 [color=green]
	13 [label="13: r2, i2 = -b / (2 * a), -droot_" peripheries=1 shape=rectangle]
	12 -> 13 [color=green]
	14 [label="14: if: i1 == 0 and i2 == 0" peripheries=1 shape=diamond]
	9 -> 14 [color=red]
	13 -> 14 [color=green]
	15 [label="15: return r1, r2" peripheries=1 shape=rectangle]
	14 -> 15 [color=red]
	16 [label="16: return (r1, i1), (r2, i2)" peripheries=1 shape=rectangle]
	14 -> 16 [color=red]
}
